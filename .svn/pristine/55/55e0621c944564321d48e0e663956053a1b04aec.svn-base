/**
 * 
 */
package com.bomweb.ekyc;

import java.io.IOException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.sql.Blob;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.sql.rowset.serial.SerialBlob;
import javax.sql.rowset.serial.SerialException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.util.EntityUtils;
import org.hibernate.Session;

import com.bomweb.model.EKYCOTPReqRsp;
import com.bomweb.service.model.EKYCOTPIn;
import com.bomweb.service.model.EKYCOTPOut;
import com.bomweb.util.HibernateUtil;

/**
 * @author SACHIN
 *
 */
public class EKYCOTP {

	static Log log = LogFactory.getLog(EKYCOTP.class);

	/**
	 * @param in
	 * @param out
	 * @return
	 */
	public static EKYCOTPOut otpRequest(EKYCOTPIn in, EKYCOTPOut out) {
		try {
			EKYCOTPReqRsp otpReq = saveOTPRequest(in);
			byte[] response = sendRequest(otpReq.getOtpReq());
			out.setResponseCode("00");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return out;
	}

	/**
	 * @param in
	 * @return
	 */
	private static EKYCOTPReqRsp saveOTPRequest(EKYCOTPIn in) {
		Session session = HibernateUtil.getSessionfactory().openSession();
		EKYCOTPReqRsp reqRsp = new EKYCOTPReqRsp();
		try {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String date = dateFormat.format(new Date());
			reqRsp.setCurrentDate(dateFormat.parse(date));
			Blob iso = new SerialBlob(in.getEkycOTPReq());
			reqRsp.setRequestDmp(iso);
			reqRsp.setOtpReq(in.getEkycOTPReq());
			reqRsp.setProcessingCode(in.getProcessingCode());
			reqRsp.setTxnDateTime(in.getTxnDateTime());
			reqRsp.setRrn(in.getRrn());
			reqRsp.setAgentID(in.getAgentID());
			session.beginTransaction();
			session.saveOrUpdate(reqRsp);
			session.getTransaction().commit();
		} catch (Exception e) {
			e.printStackTrace();
			session.getTransaction().rollback();
		}
		return reqRsp;
	}

	private static byte[] sendRequest(byte[] dataSrc) throws IOException {
		System.out.println("****e-KYC OTP REQ ******" + new String(dataSrc));
		log.info("-------- e-KYC Request Started at Time : --------" + new Timestamp(System.currentTimeMillis()));
		byte[] ekycResponse = null;
		try {

			SSLContextBuilder builder = new SSLContextBuilder();
			builder.loadTrustMaterial(null, new TrustStrategy() {
				@Override
				public boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException {
					return true;
				}
			});

			SSLConnectionSocketFactory sslSF = new SSLConnectionSocketFactory(builder.build(),
					SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

			HttpClient httpClient = HttpClients.custom().setSSLSocketFactory(sslSF).build();

			HttpEntity entity = MultipartEntityBuilder.create()
					.addBinaryBody("req.txt", dataSrc, ContentType.MULTIPART_FORM_DATA, "req.txt").build();
			HttpPost httpPost = new HttpPost("http://125.18.108.188:7003/Servlet/OtherVendorEkycServlet");
			httpPost.setEntity(entity);
			HttpResponse httpResponse = httpClient.execute(httpPost);

			HttpEntity responseEntity = httpResponse.getEntity();
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			System.out.println("Status Code : " + statusCode);
			String response = EntityUtils.toString(responseEntity, "UTF-8");
			System.out.println("**** Response : " + response);
			ekycResponse = response.getBytes();
		} catch (Exception ex) {
			log.error("Exception : " + ex);
		}
		log.info("-------- End -------------");
		return ekycResponse;
	}

}
